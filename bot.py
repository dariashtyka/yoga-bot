import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler


# –°—Ç–∞–¥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É
Q1, Q2, Q3, Q4, Q5 = range(5)

TOKEN = os.getenv("TOKEN")


# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É (—É context.user_data)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úã –ü—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é –≤ –π–æ–≥–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ !\n\n" \
        "‚ö™Ô∏è –©–æ–± –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–≤—è—á–µ–Ω–Ω—è —ñ –±—É—Ç–∏ –π–æ–≥–∞ –º–æ–Ω—Å—Ç—Ä–æ–º, –ø—Ä–æ–ø–æ–Ω—É—éüòå:\n\n" \
        "   1. –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –π–æ–≥–∞-–≤—ñ–∫—ñ —Ç–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —É—Å—ñ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–º –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º.\n"\
        "   2. –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è, –ø—Ä–æ–π—à–æ–≤—à–∏ –Ω–µ–≤–µ–ª–∏—á–∫–∏–π —Ç–µ—Å—Ç.\n\n"\
        "‚ö™Ô∏è –Ø–∫—â–æ —Ç–∏ –≤–∂–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –í—ñ–∫–æ—é(—è –ø—Ä–æ –π–æ–≥–∞-–≤—ñ–∫—ñüòâ), —Å–º—ñ–ª–∏–≤–æ –ø–∏—à–∏ /test —Ç–∞ —Ä–æ–∑–ø–æ—á–∏–Ω–∞–π !\n"\
        # "‚ûñ–ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è). –ù–∞–ø–∏—à–∏ /test\n"\
        # "‚ûñ–°–µ—Ä–µ–¥–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–æ–≥–æ). –ù–∞–ø–∏—à–∏ /test2\n"\
        # "‚ûñ–°–∫–ª–∞–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –π–æ–≥–∞ –º–æ–Ω—Å—Ç—Ä—ñ–≤). –ù–∞–ø–∏—à–∏ /test3\n"
        
    )


# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É ---
async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q1_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q1_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "1. –ô–æ–≥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –¥–ª—è —Ç–∏—Ö, —É –∫–æ–≥–æ —î —Ä–æ–∑—Ç—è–∂–∫–∞?",
        reply_markup=reply_markup
    )
    return Q1

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q1'] = query.data.split('_')[1]  # –û—Ç—Ä–∏–º–∞—î–º–æ "Tak" —á–∏ "Ni"

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q2_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q2_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "2. –ß–∏ –º–æ–∂–µ –ø–æ–ø–µ—Ä–µ–∫ —Ä–æ–∑–≥–∏–Ω–∞—Ç–∏—Å—å —É –≤–µ–ª–∏–∫—ñ–π –∞–º–ø–ª—ñ—Ç—É–¥—ñ?",
        reply_markup=reply_markup
    )
    return Q2

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q2'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q3_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q3_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "3. –ß–∏ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —à–∞–≤–∞—Å–∞–Ω—É, —è–∫—É –ü–∞–≤–ª–æ –∑–∞–¥–∏–∫—Ç–æ–≤—É—î, —è–∫—â–æ —Ç–æ–±—ñ –∑–∞—Ö–æ—Ç—ñ–ª–æ—Å—å?",
        reply_markup=reply_markup
    )
    return Q3

async def test_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q3'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q4_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q4_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "4. –ß–∏ –º–æ–∂–Ω–∞ –º–∞—Ç–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –ø—Ä–∏–π–æ–º —ó–∂—ñ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ—é –∑–∞ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏?",
        reply_markup=reply_markup
    )
    return Q4

async def test_q5_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['q4'] = query.data.split('_')[1]
    await update.callback_query.message.reply_text(
        "5. –°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –ü–∞–≤–ª—É?",
        reply_markup=ReplyKeyboardRemove()
    )
    return Q5

async def test_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['q5'] = update.message.text
    return await test_end(update, context)

async def test_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    score=1
    query = update.message

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø—Ä–∏–∫–ª–∞–¥)
    correct_answers = {'q1': 'Ni', 'q2': 'Ni', 'q3': 'Ni', 'q4': 'Ni'}
    correct_answers_print = {'q1': '–ù—ñ', 'q2': '–ù—ñ', 'q3': '–ù—ñ', 'q4': '–ù—ñ'}
    explanations={  'q1': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, –π–æ–≥–∞ —Å–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å –¥–ª—è —Ç–∏—Ö, —É –∫–æ–≥–æ –Ω–µ–º–∞—î —Ä–æ–∑—Ç—è–∂–∫–∏. –ê–º–ø–ª—ñ—Ç—É–¥–∞ —Ñ–æ—Ä–º–∏ –Ω–µ –≤–∞–∂–ª–∏–≤–∞ ! '
                        '–í–∞–∂–ª–∏–≤–∏–π —Ä—É—Ö —ñ —Ä–æ–±–æ—Ç–∞ –∑ —É–≤–∞–≥–æ—é, –¥–∏—Ö–∞–Ω–Ω—è–º, —Ç—ñ–ª–æ–º —É –î–ê–ù–ò–ô –º–æ–º–µ–Ω—Ç —É —Ç—ñ–π –∞–º–ø–ª—ñ—Ç—É–¥—ñ, —è–∫—É –∑–∞—Ä–∞–∑ –º–∞—î–º–æ. –°–∞–º–µ —Ü–µ —ñ –¥–∞—î –µ—Ñ–µ–∫—Ç –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ–π —Ä–æ–±–æ—Ç—ñ.',
                    'q2': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, –ø–æ–ø–µ—Ä–µ–∫ –∞–Ω–∞—Ç–æ–º—ñ—á–Ω–æ –º–∞—î –¥—É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –≥—Ä–∞–¥—É—Å —Ä–æ–∑–≥–∏–Ω–∞–Ω–Ω—è! –û—Å–Ω–æ–≤–Ω–∏–π –π–æ–≥–æ —Ä—É—Ö - —Ü–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è.', 
                    'q3': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ –≤ —è–∫–æ–º—É —Ä–∞–∑—ñ —à–∞–≤–∞—Å–∞–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞. –ö–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –≤–∞–∂–ª–∏–≤–∞, –∞ —à–∞–≤–∞—Å–∞–Ω–∞ –≤–∑–∞–≥–∞–ª—ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–∞. –ë–µ–∑ —Ü—å–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ —Ç–µ, —â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é—î, –≤–æ–Ω–∞ –≤–∑–∞–≥–∞–ª—ñ –º–æ–∂–µ –±—É—Ç–∏ —à–∫—ñ–¥–ª–∏–≤–æ—é.', 
                    'q4': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, —Ç—Ä–µ–±–∞ —ó—Å—Ç–∏ –º—ñ–Ω—ñ–º—É–º –∑–∞ 1,5-2 –≥–æ–¥–∏–Ω–∏, —ñ–Ω–∞–∫—à–µ —ó–∂–∞ —â–µ –±—É–¥–µ –Ω–µ –ø–µ—Ä–µ—Ç—Ä–∞–≤–ª–µ–Ω–∞ –≤ —à–ª—É–Ω–∫—É. –ê–ª–µ —è–∫—â–æ —Å–∏–ª—å–Ω–∏–π –≥–æ–ª–æ–¥, –∑–∞ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫—É—Å —Ñ—Ä—É–∫—Ç–æ–º —á–∏ –≥–æ—Ä—ñ—à–∫–∞–º–∏.',
                    'q5': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ 18 —ñ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ 100. –ê–ª–µ –Ω—ñ—Ö—Ç–æ –¥–æ—Å—Ç–µ–º–µ–Ω–Ω–æ –Ω–µ –∑–Ω–∞—î.'}
    results = []
    result_message=""
    for q in ['q1', 'q2', 'q3', 'q4']:
        user_answer = context.user_data.get(q)
        explanation_text=explanations[q]
        if user_answer == correct_answers[q]:
            correct = "‚úÖ" 
            score+=1 
        else :
            correct = "‚ùå"
        results.append(f"{q.upper()}: {correct_answers_print[q]} {correct} \n\n{explanation_text}\n\n")
    if score == 2:
        result_message="2 –≤ —â–æ–¥–µ–Ω–Ω–∏–∫, –º–∞–º—É –≤ —à–∫–æ–ª—É!\n"
    elif score == 5:
        result_message= "–¢–∏ –ø—Ä–æ–π—à–æ–≤ –ø–æ—Å–≤—è—á–µ–Ω–Ω—è, –≤—ñ—Ç–∞—é!\n"
    else:
        result_message= "–¢–∏ –º–∞–π–∂–µ —É —Ü—ñ–ª—ñ, –ø–æ—Ç—Ä–µ–Ω—É–π—Å—è —â–µ!\n"
    results.append(f"Q5: {context.user_data.get('q5')}‚úÖ\n\n{explanations['q5']}\n\n")

    await update.message.reply_text(
        "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!"+"\n"+result_message+f"–û—Å—å —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {score}/5"+"\n\n" + "\n".join(results)
    )
    return ConversationHandler.END

async def test_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    test_conv = ConversationHandler(
        entry_points=[CommandHandler('test', test_start)],
        states={
            Q1: [CallbackQueryHandler(test_q2, pattern='^q1_')],
            Q2: [CallbackQueryHandler(test_q3, pattern='^q2_')],
            Q3: [CallbackQueryHandler(test_q4, pattern='^q3_')],
            Q4: [CallbackQueryHandler(test_q5_prompt, pattern='^q4_')], 
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q5)],
        },
        fallbacks=[CommandHandler('cancel', test_cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(test_conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
