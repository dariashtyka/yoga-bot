import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler


# –°—Ç–∞–¥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É
Q1, Q2, Q3, Q4, Q5 = range(5)

T1_Q1, T1_Q2, T1_Q3, T1_Q4, T1_Q5, T1_Q6, T1_Q7, T1_Q8, T1_Q9, T1_Q10=range (10)

TOKEN = os.getenv("TOKEN")


# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å–ª–æ–≤–Ω–∏–∫—É (—É context.user_data)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úã –ü—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é –≤ –π–æ–≥–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ !\n\n" \
        "‚ö™Ô∏è –©–æ–± –ø—Ä–æ–π—Ç–∏ –ø–æ—Å–≤—è—á–µ–Ω–Ω—è —ñ –±—É—Ç–∏ –π–æ–≥–∞ –º–æ–Ω—Å—Ç—Ä–æ–º, –ø—Ä–æ–ø–æ–Ω—É—éüòå:\n\n" \
        "   1. –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –π–æ–≥–∞-–≤—ñ–∫—ñ —Ç–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ —É—Å—ñ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–º –º–∞—Ç–µ—Ä—ñ–∞–ª–æ–º.\n"\
        "   2. –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏ –∑–Ω–∞–Ω–Ω—è, –ø—Ä–æ–π—à–æ–≤—à–∏ –Ω–µ–≤–µ–ª–∏—á–∫–∏–π —Ç–µ—Å—Ç.\n\n"\
        "‚ö™Ô∏è –Ø–∫—â–æ —Ç–∏ –≤–∂–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è –∑ –í—ñ–∫–æ—é(—è –ø—Ä–æ –π–æ–≥–∞-–≤—ñ–∫—ñüòâ), —Å–º—ñ–ª–∏–≤–æ –ø–∏—à–∏ /test —Ç–∞ —Ä–æ–∑–ø–æ—á–∏–Ω–∞–π !\n"\
        # "‚ûñ–ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—è). –ù–∞–ø–∏—à–∏ /test\n"\
        # "‚ûñ–°–µ—Ä–µ–¥–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–æ–≥–æ). –ù–∞–ø–∏—à–∏ /test2\n"\
        # "‚ûñ–°–∫–ª–∞–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–¥–ª—è –π–æ–≥–∞ –º–æ–Ω—Å—Ç—Ä—ñ–≤). –ù–∞–ø–∏—à–∏ /test3\n"
        
    )


# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É ---
async def test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q1_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q1_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "1. –ô–æ–≥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –¥–ª—è —Ç–∏—Ö, —É –∫–æ–≥–æ —î —Ä–æ–∑—Ç—è–∂–∫–∞?",
        reply_markup=reply_markup
    )
    return Q1

async def test_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q1'] = query.data.split('_')[1]  # –û—Ç—Ä–∏–º–∞—î–º–æ "Tak" —á–∏ "Ni"

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q2_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q2_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "2. –ß–∏ –º–æ–∂–µ –ø–æ–ø–µ—Ä–µ–∫ —Ä–æ–∑–≥–∏–Ω–∞—Ç–∏—Å—å —É –≤–µ–ª–∏–∫—ñ–π –∞–º–ø–ª—ñ—Ç—É–¥—ñ?",
        reply_markup=reply_markup
    )
    return Q2

async def test_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q2'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q3_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q3_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "3. –ß–∏ –º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —à–∞–≤–∞—Å–∞–Ω—É, —è–∫—É –ü–∞–≤–ª–æ –∑–∞–¥–∏–∫—Ç–æ–≤—É—î, —è–∫—â–æ —Ç–æ–±—ñ –∑–∞—Ö–æ—Ç—ñ–ª–æ—Å—å?",
        reply_markup=reply_markup
    )
    return Q3

async def test_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q3'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù—ñ", callback_data="q4_Ni"), InlineKeyboardButton("–¢–∞–∫", callback_data="q4_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "4. –ß–∏ –º–æ–∂–Ω–∞ –º–∞—Ç–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –ø—Ä–∏–π–æ–º —ó–∂—ñ –ø–µ—Ä–µ–¥ –ø—Ä–∞–∫—Ç–∏–∫–æ—é –∑–∞ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏?",
        reply_markup=reply_markup
    )
    return Q4

async def test_q5_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['q4'] = query.data.split('_')[1]
    await update.callback_query.message.reply_text(
        "5. –°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –ü–∞–≤–ª—É?",
        reply_markup=ReplyKeyboardRemove()
    )
    return Q5

async def test_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['q5'] = update.message.text
    return await test_end(update, context)

async def test_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    score=1
    query = update.message

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–ø—Ä–∏–∫–ª–∞–¥)
    correct_answers = {'q1': 'Ni', 'q2': 'Ni', 'q3': 'Ni', 'q4': 'Ni'}
    correct_answers_print = {'q1': '–ù—ñ', 'q2': '–ù—ñ', 'q3': '–ù—ñ', 'q4': '–ù—ñ'}
    explanations={  'q1': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, –π–æ–≥–∞ —Å–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å –¥–ª—è —Ç–∏—Ö, —É –∫–æ–≥–æ –Ω–µ–º–∞—î —Ä–æ–∑—Ç—è–∂–∫–∏. –ê–º–ø–ª—ñ—Ç—É–¥–∞ —Ñ–æ—Ä–º–∏ –Ω–µ –≤–∞–∂–ª–∏–≤–∞ ! '
                        '–í–∞–∂–ª–∏–≤–∏–π —Ä—É—Ö —ñ —Ä–æ–±–æ—Ç–∞ –∑ —É–≤–∞–≥–æ—é, –¥–∏—Ö–∞–Ω–Ω—è–º, —Ç—ñ–ª–æ–º —É –î–ê–ù–ò–ô –º–æ–º–µ–Ω—Ç —É —Ç—ñ–π –∞–º–ø–ª—ñ—Ç—É–¥—ñ, —è–∫—É –∑–∞—Ä–∞–∑ –º–∞—î–º–æ. –°–∞–º–µ —Ü–µ —ñ –¥–∞—î –µ—Ñ–µ–∫—Ç –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ–π —Ä–æ–±–æ—Ç—ñ.',
                    'q2': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, –ø–æ–ø–µ—Ä–µ–∫ –∞–Ω–∞—Ç–æ–º—ñ—á–Ω–æ –º–∞—î –¥—É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –≥—Ä–∞–¥—É—Å —Ä–æ–∑–≥–∏–Ω–∞–Ω–Ω—è! –û—Å–Ω–æ–≤–Ω–∏–π –π–æ–≥–æ —Ä—É—Ö - —Ü–µ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—è.', 
                    'q3': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ –≤ —è–∫–æ–º—É —Ä–∞–∑—ñ –∑–∞–¥–∏–∫—Ç–æ–≤–∞–Ω—É —à–∞–≤–∞—Å–∞–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞. –ö–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –∑–∞–Ω—è—Ç—Ç—è –≤–∞–∂–ª–∏–≤–∞, –∞ —à–∞–≤–∞—Å–∞–Ω–∞ –≤–∑–∞–≥–∞–ª—ñ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–∞. –ë–µ–∑ —Ü—å–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–µ —Ç–µ, —â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é—î, –≤–æ–Ω–∞ –≤–∑–∞–≥–∞–ª—ñ –º–æ–∂–µ –±—É—Ç–∏ —à–∫—ñ–¥–ª–∏–≤–æ—é.', 
                    'q4': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ù—ñ, —Ç—Ä–µ–±–∞ —ó—Å—Ç–∏ –º—ñ–Ω—ñ–º—É–º –∑–∞ 1,5-2 –≥–æ–¥–∏–Ω–∏, —ñ–Ω–∞–∫—à–µ —ó–∂–∞ —â–µ –±—É–¥–µ –Ω–µ –ø–µ—Ä–µ—Ç—Ä–∞–≤–ª–µ–Ω–∞ –≤ —à–ª—É–Ω–∫—É. –ê–ª–µ —è–∫—â–æ —Å–∏–ª—å–Ω–∏–π –≥–æ–ª–æ–¥, –∑–∞ –ø—ñ–≤ –≥–æ–¥–∏–Ω–∏ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫—É—Å —Ñ—Ä—É–∫—Ç–æ–º —á–∏ –≥–æ—Ä—ñ—à–∫–∞–º–∏.',
                    'q5': '–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ 18 —ñ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ 100. –ê–ª–µ –Ω—ñ—Ö—Ç–æ –¥–æ—Å—Ç–µ–º–µ–Ω–Ω–æ –Ω–µ –∑–Ω–∞—î.'}
    results = []
    result_message=""
    for q in ['q1', 'q2', 'q3', 'q4']:
        user_answer = context.user_data.get(q)
        explanation_text=explanations[q]
        if user_answer == correct_answers[q]:
            correct = "‚úÖ" 
            score+=1 
        else :
            correct = "‚ùå"
        results.append(f"{q.upper()}: {correct_answers_print[q]} {correct} \n\n{explanation_text}\n\n")
    if score == 2:
        result_message="2 –≤ —â–æ–¥–µ–Ω–Ω–∏–∫, –º–∞–º—É –≤ —à–∫–æ–ª—É!\n"
    elif score == 5:
        result_message= "–¢–∏ –ø—Ä–æ–π—à–æ–≤ –ø–æ—Å–≤—è—á–µ–Ω–Ω—è, –≤—ñ—Ç–∞—é!\n"
    else:
        result_message= "–¢–∏ –º–∞–π–∂–µ —É —Ü—ñ–ª—ñ, –ø–æ—Ç—Ä–µ–Ω—É–π—Å—è —â–µ!\n"
    results.append(f"Q5: {context.user_data.get('q5')}‚úÖ\n\n{explanations['q5']}\n\n")

    await update.message.reply_text(
        "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!"+"\n"+result_message+f"–û—Å—å —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {score}/5"+"\n\n" + "\n".join(results)
    )
    return ConversationHandler.END

async def test_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ—Å—Ç—É 1 ---
async def test1_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q1_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q1_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "1. –û—Å—å–æ–≤–µ –≤–∏—Ç—è–∂—ñ–Ω–Ω—è ‚Äî —Ü–µ –¥–æ–ø–æ–º—ñ–∂–Ω–∞ –æ–ø—Ü—ñ—è, —è–∫—É –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å —Ç—ñ–ª—å–∫–∏ –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–ø—Ä–∞–≤–∞—Ö –ø—ñ—Å–ª—è —Ä–æ–∑—ñ–≥—Ä—ñ–≤—É.",
        reply_markup=reply_markup
    )
    return T1_Q1

async def test1_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q1'] = query.data.split('_')[1]  # –û—Ç—Ä–∏–º–∞—î–º–æ "Tak" —á–∏ "Ni"

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q2_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q2_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "2. –ü–æ–ø–µ—Ä–µ–∫–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª —Ö—Ä–µ–±—Ç–∞ –∑–¥–∞—Ç–µ–Ω –Ω–∞ –≤—Å—ñ —Ç–∏–ø–∏ —Ä—É—Ö—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ —Å–∫—Ä—É—Ç–∫–∏, –∞–ª–µ –∑ –º–µ–Ω—à–æ—é –∞–º–ø–ª—ñ—Ç—É–¥–æ—é.",
        reply_markup=reply_markup
    )
    return T1_Q2

async def test1_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q2'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q3_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q3_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "3. –£ –ø—Ä–∞–∫—Ç–∏—Ü—ñ –≥—ñ–º–Ω–∞—Å—Ç–∏–∫–∏ –π–æ–≥—ñ–≤ –º‚Äô—è–∑–∏ ‚Äî —Ü–µ –≥–æ–ª–æ–≤–Ω–∏–π –æ–±‚Äô—î–∫—Ç —É–≤–∞–≥–∏. –°–∞–º–µ —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äú–≤–∫–ª—é—á–∞—Ç–∏‚Äù –≤ –∫–æ–∂–Ω—ñ–π –≤–ø—Ä–∞–≤—ñ.",
        reply_markup=reply_markup
    )
    return T1_Q3

async def test1_q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q3'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q4_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q4_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "4. –ú–∞–ø–∞ —Ç—ñ–ª–∞ –≤ –º–æ–∑–∫—É ‚Äî —Ü–µ —Ç–æ—á–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞—à–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ—ñ–∑–∏—á–Ω–æ–≥–æ —Ç—ñ–ª–∞.",
        reply_markup=reply_markup
    )
    return T1_Q4

async def test1_q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q4'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q5_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q5_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "5. –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ –ø—Ä–æ—Ü–µ—Å —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –≤ —Ä–µ–≥—ñ–æ–Ω—ñ –ø–æ–ø–µ—Ä–µ–∫—É.",
        reply_markup=reply_markup
    )
    return T1_Q5

async def test1_q6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q5'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q6_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q6_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "6. –£ –≥—ñ–º–Ω–∞—Å—Ç–∏—Ü—ñ –π–æ–≥—ñ–≤ –≤–∞–∂–ª–∏–≤–æ –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É –∑–Ω–∞–π—Ç–∏ –æ–ø–æ—Ä—É —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑ –Ω–µ—é –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏, –ø–µ—Ä—à –Ω—ñ–∂ —Ä–æ–±–∏—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ä—É—Ö.",
        reply_markup=reply_markup
    )
    return T1_Q6

async def test1_q7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q6'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q7_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q7_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "7. –°—É–≥–ª–æ–±–Ω–æ-—Å—É—Ö–æ–∂–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî —Ü–µ –ø–∞—Å–∏–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏, —è–∫–∏–π –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ —Å—Ç–∞—Ç–∏—Ü—ñ.",
        reply_markup=reply_markup
    )
    return T1_Q7

async def test1_q8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q7'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q8_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q8_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "8. –ü—Ä–∞–∫—Ç–∏–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—é —ñ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ, —è–∫—â–æ —Ç—ñ–ª–æ –≤–∂–µ –Ω–∞–≤—á–∏–ª–æ—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ–∫–∏.",
        reply_markup=reply_markup
    )
    return T1_Q8

async def test1_q9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q8'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q9_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q9_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "9. –§–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ñ –±–∞–∑–æ–≤—ñ –≤–ø—Ä–∞–≤–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏–º–∏ –∑–∞ –≤—ñ–¥—á—É—Ç—Ç—è–º–∏, –Ω—ñ–∂ —Å–∫–ª–∞–¥–Ω—ñ –ø–æ–∑–∏, –±–æ –≤–∏–º–∞–≥–∞—é—Ç—å –±—ñ–ª—å—à–µ —É–≤–∞–≥–∏.",
        reply_markup=reply_markup
    )
    return T1_Q9

async def test1_q10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['q9'] = query.data.split('_')[1]

    keyboard = [
        [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–¥–∞", callback_data="q10_Ni"), InlineKeyboardButton("–ü—Ä–∞–≤–¥–∞", callback_data="q10_Tak")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "10. –ü—ñ—Å–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–æ–∂–µ –∑–º–µ–Ω—à—É–≤–∞—Ç–∏—Å—å –Ω–∞–≤‚Äô—è–∑–ª–∏–≤–µ –º–∏—Å–ª–µ–Ω–Ω—è —ñ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—á–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏.",
        reply_markup=reply_markup
    )
    return T1_Q10

async def test1_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    score=0
    await query.answer()
    context.user_data['q10'] = query.data.split('_')[1]

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    correct_answers = {
        'q1': 'Ni', 'q2': 'Ni', 'q3': 'Ni', 'q4': 'Ni', 'q5': 'Ni',
        'q6': 'Tak', 'q7': 'Ni', 'q8': 'Ni', 'q9': 'Tak', 'q10': 'Tak'
    }
    user_answer_print ={"Ni":'–ù–µ–ø—Ä–∞–≤–¥–∞', "Tak": '–ü—Ä–∞–≤–¥–∞' }
    # –í–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤–∏–≤–æ–¥—É: "–ù–µ–ø—Ä–∞–≤–¥–∞" –∑–∞–º—ñ—Å—Ç—å "–ù—ñ"
    correct_answers_print = {
        q: user_answer_print[correct_answers[q]] for q in correct_answers
    }

    explanations = {
        'q1': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –û—Å—å–æ–≤–µ –≤–∏—Ç—è–∂—ñ–Ω–Ω—è ‚Äî —Ü–µ –±–∞–∑–æ–≤–∏–π —Ç–∏–ø —Ä—É—Ö—É, —ñ –ø–µ—Ä—à–∞ —Ñ–∞–∑–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ä—É—Ö—É —Ç–æ—Ä—Å–æ–º, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤–ø—Ä–∞–≤–∏.',
        'q2': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ü–æ–ø–µ—Ä–µ–∫ –º–æ–∂–µ —Å–∫—Ä—É–≥–ª—è—Ç–∏—Å—å, –∞–ª–µ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –∞–∫—Ç–∏–≤–Ω–æ —Å–∫—Ä—É—á—É–≤–∞—Ç–∏—Å—å —á–∏ —Ä–æ–∑–≥–∏–Ω–∞—Ç–∏—Å—å ‚Äî —Ü–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ç–æ—Ä–Ω—ñ, –Ω–µ–±–∞–∂–∞–Ω—ñ —Ä—É—Ö–∏.',
        'q3': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –†–æ–±–æ—Ç–∞ –π–¥–µ —á–µ—Ä–µ–∑ —Å—É–≥–ª–æ–±–∏ –π –æ–ø–æ—Ä—É, –º‚Äô—è–∑–∏ ‚Äî —Ü–µ –≤–∏–∫–æ–Ω–∞–≤—á–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —è–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥ –∑–∞–¥–∞—á—É.',
        'q4': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ú–∞–ø–∞ —Ç—ñ–ª–∞ ‚Äî –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –º–æ–¥–µ–ª—å, —á–∞—Å—Ç–æ –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–∞, –±–æ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ü–µ–ø—Ç–æ—Ä—ñ–≤ —ñ –∑–≤–∏—á–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤.',
        'q5': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É —Ç—ñ–ª–∞ –Ω–∞ –≤—Å—é –ø–µ—Ä–∏—Ñ–µ—Ä—ñ—é, –Ω–µ –ª–∏—à–µ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–ø–µ—Ä–µ–∫—É.',
        'q6': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –æ–ø–æ—Ä–æ—é —ñ–º–ø—É–ª—å—Å –Ω–µ–º–æ–∂–ª–∏–≤–∏–π. –í–∏—à—Ç–æ–≤—Ö—É–≤–∞–Ω–Ω—è –∑ –æ–ø–æ—Ä–∏ ‚Äî –ø–µ—Ä—à–∞ —Ñ–∞–∑–∞ —Ä—É—Ö—É, –≤–∫–ª—é—á–Ω–æ –∑ –≤–∏—Ç—è–∂—ñ–Ω–Ω—è–º.',
        'q7': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –¶–µ ‚Äî –∫–ª—é—á–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –æ–± º—î–∫—Ç, —è–∫–∏–π –ø–æ—Å—Ç—ñ–π–Ω–æ –∑–∞–¥—ñ—é—î—Ç—å—Å—è –≤ –¥–∏–Ω–∞–º—ñ—Ü—ñ –π —É —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó, –æ—Å–æ–±–ª–∏–≤–æ —á–µ—Ä–µ–∑ —Ñ–∞—Å—Ü—ñ–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó.',
        'q8': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–º = –≤—Ç—Ä–∞—Ç–∞ —É–≤–∞–≥–∏ —ñ —Ä–µ—Ü–µ–ø—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É. –¢—ñ–ª–æ –ø–æ—á–∏–Ω–∞—î —Ä—É—Ö–∞—Ç–∏—Å—å –∑–∞ —Å—Ç–∞—Ä–∏–º–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—è–º–∏, –∑–Ω–∏–∫–∞—î –µ—Ñ–µ–∫—Ç.',
        'q9': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ë–∞–∑–æ–≤—ñ –≤–ø—Ä–∞–≤–∏ ‚Äî —Ü–µ –Ω–µ ¬´–ª–µ–≥–∫—ñ –ø–æ–∑–∏¬ª, –∞ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ, —â–æ –≤–∏–º–∞–≥–∞—é—Ç—å —Ç–æ—á–Ω–æ–≥–æ –∑–∞–ª—É—á–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—ñ–≤, –æ–ø–æ—Ä–∏, —É–≤–∞–≥–∏ —ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó.',
        'q10': '–ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ú–æ–∑–æ–∫ –≤–∏–º–∏–∫–∞—î –¥—Ä—É–≥–æ—Ä—è–¥–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏, –∑–≤—ñ–ª—å–Ω—è—î –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É –ø–∞–º‚Äô—è—Ç—å, –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ç–∏–º—á–∞—Å–æ–≤–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è –º–µ–Ω—Ç–∞–ª—å–Ω–∏—Ö —ñ –µ–º–æ—Ü—ñ–π–Ω–∏—Ö —Å—Ö–µ–º.'
    }

    results = []
    for q in [f'q{i}' for i in range(1, 11)]:
        user_answer = context.user_data.get(q, '‚Äî')
        if user_answer == correct_answers[q]:
            correct = "‚úÖ" 
            score+=1 
        else :
            correct = "‚ùå"
        correct_text = correct_answers_print[q]
        explanation_text = explanations.get(q, '–ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î.')
        
        results.append(
            f"{q.upper()}:\n"
            f"–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {user_answer_print[user_answer]} {correct}\n"
            # f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_text}\n"
            f"{explanation_text}\n\n"
        )
    if score == 2:
        result_message="2 –≤ —â–æ–¥–µ–Ω–Ω–∏–∫, –º–∞–º—É –≤ —à–∫–æ–ª—É!\n"
    elif score == 10:
        result_message= "–í—ñ—Ç–∞—é –≤ –∫–æ–º–∞–Ω–¥—ñ –π–æ–≥–∞ –≤—ñ–¥–º—ñ–Ω–Ω–∏–∫—ñ–≤!\n"
    else:
        result_message= "–¢–∏ –º–∞–π–∂–µ —É —Ü—ñ–ª—ñ, –ø–æ—Ç—Ä–µ–Ω—É–π—Å—è —â–µ!\n"

    await query.message.reply_text(
         "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!"+"\n"+result_message+f"–û—Å—å —Ç–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {score}/10"+"\n\n" + "\n".join(results)
    )
    return ConversationHandler.END


async def test1_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    test_conv = ConversationHandler(
        entry_points=[CommandHandler('test', test_start)],
        states={
            Q1: [CallbackQueryHandler(test_q2, pattern='^q1_')],
            Q2: [CallbackQueryHandler(test_q3, pattern='^q2_')],
            Q3: [CallbackQueryHandler(test_q4, pattern='^q3_')],
            Q4: [CallbackQueryHandler(test_q5_prompt, pattern='^q4_')], 
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, test_q5)],
        },
        fallbacks=[CommandHandler('cancel', test_cancel)]
    )

        # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—É
    test1_conv = ConversationHandler(
        entry_points=[CommandHandler('examen', test1_start)],
        states={
            T1_Q1: [CallbackQueryHandler(test1_q2, pattern='^q1_')],
            T1_Q2: [CallbackQueryHandler(test1_q3, pattern='^q2_')],
            T1_Q3: [CallbackQueryHandler(test1_q4, pattern='^q3_')],
            T1_Q4: [CallbackQueryHandler(test1_q5, pattern='^q4_')],
            T1_Q5: [CallbackQueryHandler(test1_q6, pattern='^q5_')],
            T1_Q6: [CallbackQueryHandler(test1_q7, pattern='^q6_')],
            T1_Q7: [CallbackQueryHandler(test1_q8, pattern='^q7_')], 
            T1_Q8: [CallbackQueryHandler(test1_q9, pattern='^q8_')],
            T1_Q9: [CallbackQueryHandler(test1_q10, pattern='^q9_')],
            T1_Q10: [CallbackQueryHandler(test1_end, pattern='^q10_')], 
        },
        fallbacks=[CommandHandler('cancel', test1_cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(test_conv)
    app.add_handler(test1_conv)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
